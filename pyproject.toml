[project]
name = "pytask"
description = "pytask is a workflow management system that facilitates reproducible data analyses."
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Build Tools",
]
dynamic = ["version"]
dependencies = [
    "attrs>=21.3",
    "click",
    "click-default-group",
    "networkx>=2.4",
    "optree>=0.9",
    "packaging",
    "pluggy>=1.3.0",
    "rich",
    "sqlalchemy>=2",
    'tomli>=1; python_version < "3.11"',
    'typing-extensions; python_version < "3.9"',
    "universal-pathlib>=0.2.2",
]

[project.readme]
file = "README.md"
content-type = "text/markdown"

[project.license]
text = "MIT"

[[project.authors]]
name = "Tobias Raabe"
email = "raabe@posteo.de"

[project.optional-dependencies]
docs = [
    "furo",
    "ipython",
    "matplotlib",
    "myst-parser",
    "myst-nb",
    "sphinx",
    "sphinx-click",
    "sphinx-copybutton",
    "sphinx-design>=0.3",
    "sphinx-toolbox",
    "sphinxext-opengraph",
]
plugin-list = ["httpx", "tabulate[widechars]", "tqdm"]
test = [
    "deepdiff",
    "nbmake",
    "pexpect",
    "pytest",
    "pytest-cov",
    "pytest-xdist",
    "syrupy",
    "aiohttp",      # For HTTPPath tests.
    "coiled",
]
typing = ["mypy>=1.9.0", "nbqa[mypy]>=1.8.5"]

[project.urls]
Changelog = "https://pytask-dev.readthedocs.io/en/stable/changes.html"
Documentation = "https://pytask-dev.readthedocs.io/en/stable"
Github = "https://github.com/pytask-dev/pytask"
Homepage = "https://pytask-dev.readthedocs.io/en/stable"
Tracker = "https://github.com/pytask-dev/pytask/issues"

[project.scripts]
pytask = "pytask:cli"

[build-system]
requires = ["hatchling", "hatch_vcs"]
build-backend = "hatchling.build"

[tool.rye]
managed = true
dev-dependencies = ["tox-uv>=1.7.0"]

[tool.rye.scripts]
clean-docs = { cmd = "rm -rf docs/build" }
build-docs = { cmd = "sphinx-build -b html docs/source docs/build" }

[tool.hatch.build.hooks.vcs]
version-file = "src/_pytask/_version.py"

[tool.hatch.build.targets.sdist]
exclude = ["tests"]
only-packages = true

[tool.hatch.build.targets.wheel]
only-include = ["src"]
sources = ["src"]

[tool.hatch.version]
source = "vcs"

[tool.hatch.metadata]
allow-direct-references = true

[tool.ruff]
target-version = "py38"
fix = true
unsafe-fixes = true
extend-include = ["*.ipynb"]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN101",
    "ANN102",
    "ANN401", # flake8-annotate typing.Any
    "COM812", # Comply with ruff-format.
    "ISC001", # Comply with ruff-format.
    "FBT",
    "PD901",  # Avoid generic df for dataframes.
    "S101",   # raise errors for asserts.
    "S603",   # Call check with subprocess.run.
    "S607",   # Call subprocess.run with partial executable path.
    "SLF001", # access private members.
]

[tool.ruff.lint.per-file-ignores]
"src/_pytask/_hashlib.py" = ["ALL"]
"src/_pytask/capture.py" = ["PGH003"]
"src/_pytask/hookspecs.py" = ["ARG001"]
"src/_pytask/outcomes.py" = ["N818"]
"src/_pytask/dag.py" = ["B023"]
"tests/test_capture.py" = ["T201", "PT011"]
"tests/*" = ["ANN", "D", "FBT", "PLR2004", "S101"]
"tests/test_jupyter/*" = ["INP001"]
"scripts/*" = ["D", "INP001"]
"docs/source/conf.py" = ["D401", "INP001"]
"docs_src/*" = ["ARG001", "D", "INP001", "S301"]
"docs_src/*/*.py" = ["FA100", "FA102", "PLR2004", "TCH"]
"docs/source/how_to_guides/functional_interface*" = [
    "B018",
    "D",
    "INP",
    "ARG005",
]
"docs_src/how_to_guides/using_task_returns_*_task.py" = ["ARG005", "E731"]

[tool.ruff.lint.isort]
force-single-line = true

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.pytest.ini_options]
testpaths = ["src", "tests"]
markers = [
    "wip: Tests that are work-in-progress.",
    "unit: Flag for unit tests which target mainly a single function.",
    "integration: Flag for integration tests which may comprise of multiple unit tests.",
    "end_to_end: Flag for tests that cover the whole program.",
]
filterwarnings = [
    "ignore:'@pytask.mark.*. is deprecated:FutureWarning",
    "ignore:The --rsyncdir command line argument:DeprecationWarning",
]

[tool.mypy]
files = ["src", "tests"]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
ignore_errors = true

[[tool.mypy.overrides]]
module = ["click_default_group", "networkx"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["_pytask.coiled_utils"]
disable_error_code = ["import-not-found"]

[[tool.mypy.overrides]]
module = ["_pytask.hookspecs"]
disable_error_code = ["empty-body"]

[tool.codespell]
skip = "*.js,*/termynal.css"

[tool.refurb]
python_version = "3.8"

[tool.coverage.report]
exclude_also = [
    "pragma: no cover",
    "if TYPE_CHECKING.*:",
    "\\.\\.\\.",
    "def __repr__",
]

[tool.mdformat]
wrap = 88
end_of_line = "keep"
