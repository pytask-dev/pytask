<svg width="1350" height="1050" viewBox="0 0 1350 1050"
     xmlns="http://www.w3.org/2000/svg">
    <style>
        @font-face {
            font-family: "Fira Code";
            src: local("FiraCode-Regular"),
                 url("https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2") format("woff2"),
                 url("https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff") format("woff");
            font-style: normal;
            font-weight: 400;
        }
        @font-face {
            font-family: "Fira Code";
            src: local("FiraCode-Bold"),
                 url("https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2") format("woff2"),
                 url("https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff") format("woff");
            font-style: bold;
            font-weight: 700;
        }
        span {
            display: inline-block;
            white-space: pre;
            vertical-align: top;
            font-size: 18px;
            font-family:'Fira Code','Cascadia Code',Monaco,Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace;
        }
        a {
            text-decoration: none;
            color: inherit;
        }
        .blink {
           animation: blinker 1s infinite;
        }
        @keyframes blinker {
            from { opacity: 1.0; }
            50% { opacity: 0.3; }
            to { opacity: 1.0; }
        }
        #wrapper {
            padding: 50px;
            padding-top: 50px;
        }
        #terminal {
            position: relative;
            display: flex;
            flex-direction: column;
            align-items: center;
            background-color: #0c0c0c;
            border-radius: 14px;
            outline: 1px solid #484848;
        }
        #terminal-header {
            position: relative;
            width: 100%;
            background-color: #2e2e2e;
            margin-bottom: 12px;
            font-weight: bold;
            border-radius: 14px 14px 0 0;
            color: #f2f2f2;
            font-size: 18px;
            box-shadow: inset 0px -1px 0px 0px #4e4e4e,
                        inset 0px -4px 8px 0px #1a1a1a;
        }
        #terminal-title-tab {
            display: inline-block;
            margin-top: 14px;
            margin-left: 124px;
            font-family: sans-serif;
            padding: 14px 28px;
            border-radius: 6px 6px 0 0;
            background-color: #0c0c0c;
            box-shadow: inset 0px 1px 0px 0px #4e4e4e,
                        0px -4px 4px 0px #1e1e1e,
                        inset 1px 0px 0px 0px #4e4e4e,
                        inset -1px 0px 0px 0px #4e4e4e;
        }
        #terminal-traffic-lights {
            position: absolute;
            top: 24px;
            left: 20px;
        }
        #terminal-body {
            line-height: 22px;
            padding: 14px;
        }
        .r1 {color: #f2f2f2; text-decoration-color: #f2f2f2;background-color: #0c0c0c;}
.r2 {font-weight: bold;color: #f2f2f2; text-decoration-color: #f2f2f2;;background-color: #0c0c0c;}
.r3 {;color: #f2f2f2; text-decoration-color: #f2f2f2;;background-color: #0c0c0c;}
    </style>
    <foreignObject x="0" y="0" width="100%" height="100%">
        <body xmlns="http://www.w3.org/1999/xhtml">
            <div id="wrapper">
                <div id="terminal">
                    <div id='terminal-header'>
                        <svg id="terminal-traffic-lights" width="90" height="21" viewBox="0 0 90 21" xmlns="http://www.w3.org/2000/svg">
                            <circle cx="14" cy="8" r="8" fill="#ff6159"/>
                            <circle cx="38" cy="8" r="8" fill="#ffbd2e"/>
                            <circle cx="62" cy="8" r="8" fill="#28c941"/>
                        </svg>
                        <div id="terminal-title-tab">pytask</div>
                    </div>
                    <div id='terminal-body'>
                        <div><span class="r1">$ pytask markers                                                                                      </span></div>
                        <div><span class="r1">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓</span></div>
<div><span class="r1">┃</span><span class="r2"> Marker                           </span><span class="r1">┃</span><span class="r2"> Description                                                     </span><span class="r1">┃</span></div>
<div><span class="r1">┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩</span></div>
<div><span class="r1">│ </span><span class="r1">pytask.mark.depends_on          </span><span class="r1"> │ Add dependencies to a task. See this tutorial for more          │</span></div>
<div><span class="r1">│                                  │ information: </span><span class="r3"><a href="https://bit.ly/3JlxylS">https://bit.ly/3JlxylS</a></span><span class="r1">.                            │</span></div>
<div><span class="r1">│                                  │                                                                 │</span></div>
<div><span class="r1">│ </span><span class="r1">pytask.mark.parametrize         </span><span class="r1"> │ The marker for pytest&#x27;s way of repeating tasks which is         │</span></div>
<div><span class="r1">│                                  │ explained in this tutorial: </span><span class="r3"><a href="https://bit.ly/3uqZqkk">https://bit.ly/3uqZqkk</a></span><span class="r1">.             │</span></div>
<div><span class="r1">│                                  │                                                                 │</span></div>
<div><span class="r1">│ </span><span class="r1">pytask.mark.persist             </span><span class="r1"> │ </span><span class="r1">Prevent execution of a task if all products exist and even if  </span><span class="r1"> │</span></div>
<div><span class="r1">│                                  │ </span><span class="r1">something has changed (dependencies, source file, products).   </span><span class="r1"> │</span></div>
<div><span class="r1">│                                  │ </span><span class="r1">This decorator might be useful for expensive tasks where only  </span><span class="r1"> │</span></div>
<div><span class="r1">│                                  │ </span><span class="r1">the formatting of the file has changed. The state of the files </span><span class="r1"> │</span></div>
<div><span class="r1">│                                  │ </span><span class="r1">which have changed will also be remembered and another run will</span><span class="r1"> │</span></div>
<div><span class="r1">│                                  │ </span><span class="r1">skip the task with success.                                    </span><span class="r1"> │</span></div>
<div><span class="r1">│                                  │                                                                 │</span></div>
<div><span class="r1">│ </span><span class="r1">pytask.mark.produces            </span><span class="r1"> │ Add products to a task. See this tutorial for more information: │</span></div>
<div><span class="r1">│                                  │ </span><span class="r3"><a href="https://bit.ly/3JlxylS">https://bit.ly/3JlxylS</a></span><span class="r1">.                                         │</span></div>
<div><span class="r1">│                                  │                                                                 │</span></div>
<div><span class="r1">│ </span><span class="r1">pytask.mark.skip                </span><span class="r1"> │ </span><span class="r1">Skip a task and all its dependent tasks.                       </span><span class="r1"> │</span></div>
<div><span class="r1">│                                  │                                                                 │</span></div>
<div><span class="r1">│ </span><span class="r1">pytask.mark.skip_ancestor_failed</span><span class="r1"> │ </span><span class="r1">Internal decorator applied to tasks if any of its preceding    </span><span class="r1"> │</span></div>
<div><span class="r1">│                                  │ </span><span class="r1">tasks failed.                                                  </span><span class="r1"> │</span></div>
<div><span class="r1">│                                  │                                                                 │</span></div>
<div><span class="r1">│ </span><span class="r1">pytask.mark.skip_unchanged      </span><span class="r1"> │ </span><span class="r1">Internal decorator applied to tasks which have already been    </span><span class="r1"> │</span></div>
<div><span class="r1">│                                  │ </span><span class="r1">executed and have not been changed.                            </span><span class="r1"> │</span></div>
<div><span class="r1">│                                  │                                                                 │</span></div>
<div><span class="r1">│ </span><span class="r1">pytask.mark.skipif              </span><span class="r1"> │ </span><span class="r1">Skip a task and all its dependent tasks if a condition is met. </span><span class="r1"> │</span></div>
<div><span class="r1">│                                  │                                                                 │</span></div>
<div><span class="r1">│ </span><span class="r1">pytask.mark.task                </span><span class="r1"> │ Mark a function as a task regardless of its name. Or mark tasks │</span></div>
<div><span class="r1">│                                  │ which are repeated in a loop. See this tutorial for more        │</span></div>
<div><span class="r1">│                                  │ information: </span><span class="r3"><a href="https://bit.ly/3DWrXS3">https://bit.ly/3DWrXS3</a></span><span class="r1">.                            │</span></div>
<div><span class="r1">│                                  │                                                                 │</span></div>
<div><span class="r1">│ </span><span class="r1">pytask.mark.try_first           </span><span class="r1"> │ </span><span class="r1">Try to execute a task a early as possible.                     </span><span class="r1"> │</span></div>
<div><span class="r1">│                                  │                                                                 │</span></div>
<div><span class="r1">│ </span><span class="r1">pytask.mark.try_last            </span><span class="r1"> │ </span><span class="r1">Try to execute a task a late as possible.                      </span><span class="r1"> │</span></div>
<div><span class="r1">└──────────────────────────────────┴─────────────────────────────────────────────────────────────────┘</span></div>
<div><span class="r1"></span><span class="r1">                                                                                                      </span></div>
                    </div>
                </div>
            </div>
        </body>
    </foreignObject>
</svg>
